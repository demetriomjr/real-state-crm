// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Base model for audit fields
model AuditBase {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  created_by String?
  updated_at DateTime  @updatedAt
  updated_by String?
  deleted_at DateTime?
  deleted_by String?

  @@map("audit_base")
}

// User entity
model User {
  id         String    @id @default(uuid())
  fullName   String
  username   String    @unique
  password   String
  user_level Int       @default(1)
  created_at DateTime  @default(now())
  created_by String?
  updated_at DateTime  @updatedAt
  updated_by String?
  deleted_at DateTime?
  deleted_by String?

  // Relations
  userRoles UserRole[]
  tenant_id String?
  business  Business? @relation(fields: [tenant_id], references: [tenant_id])

  @@map("users")
}

// UserRole entity
model UserRole {
  id         String @id @default(uuid())
  user_id    String
  role       String
  is_allowed Boolean @default(true)
  created_at DateTime @default(now())
  created_by String?
  updated_at DateTime @updatedAt
  updated_by String?
  deleted_at DateTime?
  deleted_by String?

  // Relations
  user User @relation(fields: [user_id], references: [id])

  @@map("user_roles")
}

// Business entity
model Business {
  id           String   @id @default(uuid())
  company_name String
  subscription Int
  tenant_id    String   @unique
  created_at   DateTime @default(now())
  created_by   String?
  updated_at   DateTime @updatedAt
  updated_by   String?
  deleted_at   DateTime?
  deleted_by   String?

  // Relations
  users User[]

  @@map("businesses")
}
